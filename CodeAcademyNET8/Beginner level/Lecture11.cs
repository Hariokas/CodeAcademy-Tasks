using System.Diagnostics;
using System.Text;
using static CodeAcademyNET8.Helpers;

namespace CodeAcademyNET8;

internal static class Lecture11
{
    public static void RunTasks()
    {
        Task_1();
        Task_2();
        Task_3();
        Task_4();
        Task_5();
        Task_6_1();
        Task_6_2();
    }

    public static void Task_1()
    {
        var a = 10;
        var b = 5;
        var c = 8;

        var max = a;

        if (b > max)
            max = b;

        if (c > max)
            max = c; // <- This is fixed. The problem (question in task) was the bug max = b;

        Console.WriteLine($"The maximum value is: {max}");
        Separator();
    }

    public static void Task_2()
    {
        var firstName = "John";
        var lastName = "Doe";
        var fullName =
            firstName + " " +
            lastName; // <- This is fixed. The problem (question in task) was the bug that the space was missing;
        Console.WriteLine($"Full Name: {fullName}");

        Separator();
    }

    public static void Task_3()
    {
        var counter = 1;
        while (counter <= 10)
        {
            Console.WriteLine($"Count: {counter}");
            counter++; // <- this is supposed to increase, not to decrease the counter.
        }

        Separator();
    }

    public static void Task_4()
    {
        var i = 1;

        while (i <= 5)
        {
            Console.WriteLine(i);
            i++;
        }

        Separator();
    }

    public static void Task_5()
    {
        var name1 = "John";
        var name2 = "john";

        if (name1.Equals(name2, StringComparison.InvariantCultureIgnoreCase))
            Console.WriteLine("Names are the same.");
        else
            Console.WriteLine("Names are different.");

        Separator();
    }

    public static void Task_6_1()
    {
        Console.Write("Enter the text that you want to reverse: ");
        var input = Console.ReadLine();

        if (string.IsNullOrEmpty(input))
        {
            Console.WriteLine("The input is empty...");
            return;
        }

        var sb = new StringBuilder();
        for (var i = input.Length - 1; i >= 0; i--) sb.Append(input[i]);

        Console.WriteLine($"Reversed input is: {sb}");
        Separator();
    }

    public static void Task_6_2()
    {
        //Console.Write("Enter the text that you want to remove duplicate characters from: ");
        //var input = Console.ReadLine();

        //var input = "This is some quite long text so that the actual comparison would be cooler to check and see which is faster - stringbuilder with ToString() method, or a traditional way of checking and appending the string.";

        var input =
            "Main menuWikipediaThe Free EncyclopediaSearch WikipediaSearchCreate accountLog inPersonal toolsContents hideTopDesign goalsHistoryToggle History subsectionSyntaxDistinguishing featuresToggle Distinguishing features subsectionCommon type systemToggle Common type system subsectionLibrariesExamplesToggle Examples subsectionStandardization and licensingImplementationsSee alsoNotesReferencesFurther readingExternal linksC Sharp programming languageArticleTalkReadEditView historyToolsFrom Wikipedia the free encyclopediaThe correct title of this article is C The substitution of the  is due to technical restrictionsCParadigm	Multiparadigm structured imperative objectoriented eventdriven taskdriven functional generic reflective concurrentFamily	CDesigned by	Anders Hejlsberg MicrosoftDeveloper	Mads Torgersen MicrosoftFirst appeared	2000 23 years ago1Stable release	1202 Edit this on Wikidata  14 November 2023 6 days agoTyping discipline	Static dynamic3 strong safe nominative partially inferredPlatform	Common Language InfrastructureLicense	Roslyn compiler MITX114NET Core CLR MITX115Mono compiler dual GPLv3 and MITX11DotGNU dual GPL and LGPLFilename extensions	cs csxWebsite	learnmicrosoftcomenusdotnetcsharpMajor implementationsVisual C NET NET Framework discontinued Mono DotGNU discontinued Universal Windows PlatformDialectsC Polyphonic C Enhanced CInfluenced byC6 C Eiffel Fa Haskell Scala Icon J J Java6 ML Modula3 Object Pascal7 VBInfluencedChapel8 Clojure9 Crystal10 D J Dart11 F Hack Java1213 Kotlin Nemerle Oxygene Rust14 Swift15 Vala TypeScript C Sharp Programming at WikibooksC pronounced See sharpb is a generalpurpose highlevel programming language supporting multiple paradigms C encompasses static typing16 4  strong typing lexically scoped imperative declarative functional generic16 22  objectoriented classbased and componentoriented programming disciplines17The C programming language was designed by Anders Hejlsberg from Microsoft in 2000 and was later approved as an international standard by Ecma ECMA334 in 2002 and ISOIEC ISOIEC 23270 in 2003 Microsoft introduced C along with NET Framework and Visual Studio both of which were closedsource At the time Microsoft had no opensource products Four years later in 2004 a free and opensource project called Mono began providing a crossplatform compiler and runtime environment for the C programming language A decade later Microsoft released Visual Studio Code code editor Roslyn compiler and the unified NET platform software framework all of which support C and are free opensource and crossplatform Mono also joined Microsoft but was not merged into NETAs of November 2023 the most recent stable version of the language is C 120 which was released in 2023 in NET 801819Design goalsThe Ecma standard lists these design goals for C17The language is intended to be a simple modern generalpurpose objectoriented programming languageThe language and implementations thereof should provide support for software engineering principles such as strong type checking array bounds checking20 5859  detection of attempts to use uninitialized variables and automatic garbage collection20 563  Software robustness durability and programmer productivity are importantThe language is intended for use in developing software components suitable for deployment in distributed environmentsPortability is very important for source code and programmers especially those already familiar with C and CSupport for internationalization20 314  is very importantC is intended to be suitable for writing applications for both hosted and embedded systems ranging from the very large that use sophisticated operating systems down to the very small having dedicated functionsAlthough C applications are intended to be economical with regard to memory and processing power requirements the language was not intended to compete directly on performance and size with C or assembly language21HistoryDuring the development of the NET Framework the class libraries were originally written using a managed code compiler system called Simple Managed C SMC2223 In January 1999 Anders Hejlsberg formed a team to build a new language at the time called Cool which stood for Clike Object Oriented Language24 Microsoft had considered keeping the name Cool as the final name of the language but chose not to do so for trademark reasons By the time the NET project was publicly announced at the July 2000 Professional Developers Conference the language had been renamed C and the class libraries and ASPNET runtime had been ported to CHejlsberg is Cs principal designer and lead architect at Microsoft and was previously involved with the design of Turbo Pascal Embarcadero Delphi formerly CodeGear Delphi Inprise Delphi and Borland Delphi and Visual J In interviews and technical papers he has stated that flaws25 in most major programming languages eg C Java Delphi and Smalltalk drove the fundamentals of the Common Language Runtime CLR which in turn drove the design of the C language itselfJames Gosling who created the Java programming language in 1994 and Bill Joy a cofounder of Sun Microsystems the originator of Java called C an imitation of Java Gosling further said that C is sort of Java with reliability productivity and security deleted2627 In July 2000 Hejlsberg said that C is not a Java clone and is much closer to C in its design28Since the release of C 20 in November 2005 the C and Java languages have evolved on increasingly divergent trajectories becoming two quite different languages One of the first major departures came with the addition of generics to both languages with vastly different implementations C makes use of reification to provide firstclass generic objects that can be used like any other class with code generation performed at classload time29 Furthermore C has added several major features to accommodate functionalstyle programming culminating in the LINQ extensions released with C 30 and its supporting framework of lambda expressions extension methods and anonymous types30 These features enable C programmers to use functional programming techniques such as closures when it is advantageous to their application The LINQ extensions and the functional imports help developers reduce the amount of boilerplate code that is included in common tasks like querying a database parsing an xml file or searching through a data structure shifting the emphasis onto the actual program logic to help improve readability and maintainability31C used to have a mascot called Andy named after Anders Hejlsberg It was retired on January 29 200432C was originally submitted to the ISOIEC JTC 1 subcommittee SC 22 for review33 under ISOIEC 23270200334 was withdrawn and was then approved under ISOIEC 23270200635 The 232702006 is withdrawn under 232702018 and approved with this version36NameMicrosoft first used the name C in 1988 for a variant of the C language designed for incremental compilation37 That project was not completed and the name was later reusedCsharp musical noteThe name C sharp was inspired by the musical notation whereby a sharp symbol indicates that the written note should be made a semitone higher in pitch38 This is similar to the language name of C where  indicates that a variable should be incremented by 1 after being evaluated The sharp symbol also resembles a ligature of four  symbols in a twobytwo grid further implying that the language is an increment of C39Due to technical limitations of display standard fonts browsers etc and the fact that the sharp symbol U266F  MUSIC SHARP SIGN sharp is not present on most keyboard layouts the number sign U0023  NUMBER SIGN num was chosen to approximate the sharp symbol in the written name of the programming language40 This convention is reflected in the ECMA334 C Language Specification17The sharp suffix has been used by a number of other NET languages that are variants of existing languages including J a NET language also designed by Microsoft that is derived from Java 11 A from Ada and the functional programming language F41 The original implementation of Eiffel for NET was called Eiffel42 a name retired since the full Eiffel language is now supported The suffix has also been used for libraries such as Gtk a NET wrapper for GTK and other GNOME libraries and Cocoa a wrapper for CocoaVersionsVersion	Language specification	Date	NET	Visual StudioEcma	ISOIEC	MicrosoftC 10	ECMA3342003 December 2002	ISOIEC 232702003 April 2003	January 2002	January 2002	NET Framework 10	Visual Studio NET 2002C 11C 12	October 2003	April 2003	NET Framework 11Visual Studio NET 2003C 2043	ECMA3342006 June 2006	ISOIEC 232702006 September 2006	September 2005c	November 2005	NET Framework 20NET Framework 30Visual Studio 2005Visual Studio 2008C 3044	None	August 2007	November 2007	NET Framework 20 Except LINQ45NET Framework 30 Except LINQ45NET Framework 35Visual Studio 2008C 4046	April 2010	April 2010	NET Framework 4Visual Studio 2010C 5047	ECMA3342017 December 2017	ISOIEC 232702018 December 2018	June 2013	August 2012	NET Framework 45Visual Studio 2012Visual Studio 2013C 6048	ECMA3342022 June 2022	None	Draft	July 2015	NET Framework 46NET Core 10NET Core 11Visual Studio 2015C 704950	None	Specification proposal	March 2017	NET Framework 47Visual Studio 2017 version 15051C 7152	Specification proposal	August 2017	NET Core 20Visual Studio 2017 version 15353C 7254	Specification proposal	November 2017		Visual Studio 2017 version 15555C 7356	Specification proposal Archived March 7 2021 at the Wayback Machine	May 2018	NET Core 21NET Core 22NET Framework 48Visual Studio 2017 version 15757C 8058	Specification proposal	September 2019	NET Core 30NET Core 31Visual Studio 2019 version 16359C 9060	Specification proposal	November 2020	NET 50Visual Studio 2019 version 16861C 10062	Specification proposal	November 2021	NET 60Visual Studio 2022 version 17063C 11064	Specification proposal	November 2022	NET 70Visual Studio 2022 version 17465C 12066			Specification proposal	November 2023	NET 80Visual Studio 2022 version 17867SyntaxMain article C syntaxSee also Syntax programming languagesThe core syntax of the C language is similar to that of other Cstyle languages such as C C and Java particularlySemicolons are used to denote the end of a statementCurly brackets are used to group statements Statements are commonly grouped into methods functions methods into classes and classes into namespacesVariables are assigned using an equals sign but compared using two consecutive equals signsSquare brackets are used with arrays both to declare them and to get a value at a given index in one of themDistinguishing featuresSee also Comparison of C and JavaSome notable features of C that distinguish it from C C and Java where noted arePortabilityBy design C is the programming language that most directly reflects the underlying Common Language Infrastructure CLI68 Most of its intrinsic types correspond to valuetypes implemented by the CLI framework However the language specification does not state the code generation requirements of the compiler that is it does not state that a C compiler must target a Common Language Runtime or generate Common Intermediate Language CIL or generate any other specific format Some C compilers can also generate machine code like traditional compilers of C or Fortran6970TypingC supports strongly implicitly typed variable declarations with the keyword var16 470  and implicitly typed arrays with the keyword new followed by a collection initializer16 80 20 58 C supports a strict Boolean data type bool Statements that take conditions such as while and if require an expression of a type that implements the true operator such as the Boolean type While C also has a Boolean type it can be freely converted to and from integers and expressions such as if a require only that a is convertible to bool allowing a to be an int or a pointer C disallows this integer meaning true or false approach on the grounds that forcing programmers to use expressions that return exactly bool can prevent certain types of programming mistakes such as if a  b use of assignment  instead of equality C is more type safe than C The only implicit conversions by default are those that are considered safe such as widening of integers This is enforced at compiletime during JIT and in some cases at runtime No implicit conversions occur between Booleans and integers nor between enumeration members and integers except for literal 0 which can be implicitly converted to any enumerated type Any userdefined conversion must be explicitly marked as explicit or implicit unlike C copy constructors and conversion operators which are both implicit by defaultC has explicit support for covariance and contravariance in generic types16 144 20 23  unlike C which has some degree of support for contravariance simply through the semantics of return types on virtual methodsEnumeration members are placed in their own scopeThe C language does not allow for global variables or functions All methods and members must be declared within classes Static members of public classes can substitute for global variables and functionsLocal variables cannot shadow variables of the enclosing block unlike C and CMetaprogrammingMetaprogramming can be achieved in several waysReflection is supported through NET APIs which enable scenarios such as type metadata inspection and dynamic method invocationExpression trees71 represent code as an abstract syntax tree where each node is an expression that can be inspected or executed This enables dynamic modification of executable code at runtime Expression trees introduce some homoiconicity to the languageAttributes are metadata that can be attached to types members or entire assemblies equivalent to annotations in Java Attributes are accessible both to the compiler and to code through reflection Many of native attributes duplicate the functionality of GCCs and VisualCs platformdependent preprocessor directivescitation neededSystemReflectionEmit namespace72 which contains classes that emit metadata and CIL types assemblies etc at runtimeThe NET Compiler Platform Roslyn provides API access to language compilation services allowing for the compilation of C code from within NET applications It exposes APIs for syntactic lexical analysis of code semantic analysis dynamic compilation to CIL and code emission73Source generators74 a feature of the Roslyn C compiler enable compile time metaprogramming During the compilation process developers can inspect the code being compiled with the compilers API and pass additional generated C source code to be compiledMethods and functionsA method in C is a member of a class that can be invoked as a function a sequence of instructions rather than the mere valueholding capability of a class property As in other syntactically similar languages such as C and ANSI C the signature of a method is a declaration comprising in order any optional accessibility keywords such as private the explicit specification of its return type such as int or the keyword void if no value is returned the name of the method and finally a parenthesized sequence of commaseparated parameter specifications each consisting of a parameters type its formal name and optionally a default value to be used whenever none is provided Certain specific kinds of methods such as those that simply get or set a class property by return value or assignment do not require a full signature but in the general case the definition of a class includes the full signature declaration of its methodsLike C and unlike Java C programmers must use the scope modifier keyword virtual to allow methods to be overridden by subclasses75Extension methods in C allow programmers to use static methods as if they were methods from a classs method table allowing programmers to add methods to an object that they feel should exist on that object and its derivatives16 103105 20 202203 The type dynamic allows for runtime method binding allowing for JavaScriptlike method calls and runtime object composition16 114118 C has support for stronglytyped function pointers via the keyword delegate Like the Qt frameworks pseudoC signal and slot C has semantics specifically surrounding publishsubscribe style events though C uses delegates to do soC offers Javalike synchronized method calls via the attribute MethodImplMethodImplOptionsSynchronized and has support for mutuallyexclusive locks via the keyword lockPropertyC supports classes with properties The properties can be simple accessor functions with a backing field or implement getter and setter functionsSince C 30 the syntactic sugar of autoimplemented properties is available76 where the accessor getter and mutator setter encapsulate operations on a single attribute of a classNamespaceA C namespace provides the same level of code isolation as a Java package or a C namespace with very similar rules and features to a package Namespaces can be imported with the using syntax77Memory accessIn C memory address pointers can only be used within blocks specifically marked as unsafe78 and programs with unsafe code need appropriate permissions to run Most object access is done through safe object references which always either point to a live object or have the welldefined null value it is impossible to obtain a reference to a dead object one that has been garbage collected or to a random block of memory An unsafe pointer can point to an instance of an unmanaged value type that does not contain any references to objects subject to garbage collections such as class instances arrays or strings Code that is not marked as unsafe can still store and manipulate pointers through the SystemIntPtr type but it cannot dereference themManaged memory cannot be explicitly freed instead it is automatically garbage collected Garbage collection addresses the problem of memory leaks by freeing the programmer of responsibility for releasing memory that is no longer needed in most cases Code that retains references to objects longer than is required can still experience higher memory usage than necessary however once the final reference to an object is released the memory is available for garbage collectionExceptionA range of standard exceptions are available to programmers Methods in standard libraries regularly throw system exceptions in some circumstances and the range of exceptions thrown is normally documented Custom exception classes can be defined for classes allowing handling to be put in place for particular circumstances as needed79Checked exceptions are not present in C in contrast to Java This has been a conscious decision based on the issues of scalability and versionability80PolymorphismUnlike C C does not support multiple inheritance although a class can implement any number of interfaces fully abstract classes This was a design decision by the languages lead architect to avoid complications and to simplify architectural requirements throughout CLIWhen implementing multiple interfaces that contain a method with the same name and taking parameters of the same type in the same order ie the same signature similar to Java C allows both a single method to cover all interfaces and if necessary specific methods for each interfaceHowever unlike Java C supports operator overloading81Language Integrated Query LINQC has the ability to utilize LINQ through the NET Framework A developer can query a variety of data sources provided IEnumerableT interface is implemented on the object This includes XML documents an ADONET dataset and SQL databases82Using LINQ in C brings advantages like Intellisense support strong filtering capabilities type safety with compile error checking ability and consistency for querying data over a variety of sources83 There are several different language structures that can be utilized with C and LINQ and they are query expressions lambda expressions anonymous types implicitly typed variables extension methods and object initializers84LINQ has two syntaxes query syntax and method syntax However the compiler always converts the query syntax to method syntax at compile time85using SystemLinqvar numbers  new int  5 10 8 3 6 12  Query syntax SELECT num FROM numbers WHERE num  2  0 ORDER BY numvar numQuery1         from num in numbers        where num  2  0        orderby num        select num Method syntaxvar numQuery2          numbers        Wherenum  num  2  0        OrderByn  nFunctional programmingThough primarily an imperative language C always adds functional features over time8687 for exampleFunctions as firstclass citizen  C 10 delegates88Higherorder functions  C 10 together with delegatesAnonymous functions  C 2 anonymous delegates and C 3 lambdas expressions89Closures  C 2 together with anonymous delegates and C 3 together with lambdas expressions89Type inference  C 3 with implicitly typed local variables var and C 9 targettyped new expressions newList comprehension  C 3 LINQTuples  NET Framework 40 but it becomes popular when C 70 introduced a new tuple type with language support90Nested functions  C 7090Pattern matching  C 7090Immutability  C 72 readonly struct C 9 record types91 and Init only setters92Type classes  C 12 rolesextensions in development93Common type systemC has a unified type system This unified type system is called Common Type System CTS94 Part 2 Chapter 4 The Type System A unified type system implies that all types including primitives such as integers are subclasses of the SystemObject class For example every type inherits a ToString methodCategories of data typesCTS separates data types into two categories94Reference typesValue typesInstances of value types neither have referential identity nor referential comparison semantics Equality and inequality comparisons for value types compare the actual data values within the instances unless the corresponding operators are overloaded Value types are derived from SystemValueType always have a default value and can always be created and copied Some other limitations on value types are that they cannot derive from each other but can implement interfaces and cannot have an explicit default parameterless constructor because they already have an implicit one which initializes all contained data to the typedependent default value 0 null or alike Examples of value types are all primitive types such as int a signed 32bit integer float a 32bit IEEE floatingpoint number char a 16bit Unicode code unit and SystemDateTime identifies a specific point in time with nanosecond precision Other examples are enum enumerations and struct user defined structuresIn contrast reference types have the notion of referential identity meaning that each instance of a reference type is inherently distinct from every other instance even if the data within both instances is the same This is reflected in default equality and inequality comparisons for reference types which test for referential rather than structural equality unless the corresponding operators are overloaded such as the case for SystemString Some operations are not always possible such as creating an instance of a reference type copying an existing instance or performing a value comparison on two existing instances Though specific reference types can provide such services by exposing a public constructor or implementing a corresponding interface such as ICloneable or IComparable Examples of reference types are object the ultimate base class for all other C classes SystemString a string of Unicode characters and SystemArray a base class for all C arraysBoth type categories are extensible with userdefined typesBoxing and unboxingBoxing is the operation of converting a valuetype object into a value of a corresponding reference type94 Boxing in C is implicitUnboxing is the operation of converting a value of a reference type previously boxed into a value of a value type94 Unboxing in C requires an explicit type cast A boxed object of type T can only be unboxed to a T or a nullable T95Exampleint foo  42          Value typeobject bar  foo      foo is boxed to barint foo2  intbar   Unboxed back to value typeLibrariesThe C specification details a minimum set of types and class libraries that the compiler expects to have available In practice C is most often used with some implementation of the Common Language Infrastructure CLI which is standardized as ECMA335 Common Language Infrastructure CLIIn addition to the standard CLI specifications there are many commercial and community class libraries that build on top of the NET framework libraries to provide additional functionality96C can make calls to any library included in the List of NET libraries and frameworksExamplesHello WorldThe following is a very simple C program a version of the classic Hello world example using the toplevel statements feature introduced in C 997using SystemConsoleWriteLineHello worldFor code written as C 8 or lower the entry point logic of a program must be written in a Main method inside a typeusing System A version of the classic Hello World programclass Program    static void Main            ConsoleWriteLineHello world    This code will display this text in the console windowHello worldEach line has a purposeusing SystemThe above line imports all types in the System namespace For example the Console class used later in the source code is defined in the System namespace meaning it can be used without supplying the full name of the type which includes the namespace A version of the classic Hello World programThis line is a comment it describes and documents the code for the programmersclass ProgramAbove is a class definition for the Program class Everything that follows between the pair of braces describes that class    The curly brackets demarcate the boundaries of a code block In this first instance they are marking the start and end of the Program classstatic void MainThis declares the class member method where the program begins execution The NET runtime calls the Main method Unlike in Java the Main method does not need the public keyword which tells the compiler that the method can be called from anywhere by any class98 Writing static void Mainstring args is equivalent to writing private static void Mainstring args The static keyword makes the method accessible without an instance of Program Each console applications Main entry point must be declared static otherwise the program would require an instance of Program but any instance would require a program To avoid that irresolvable circular dependency C compilers processing console applications like that above report an error if there is no static Main method The void keyword declares that Main has no return value Note however that short programs can be written using Top Level Statements introduced in C 9 as mentioned earlierConsoleWriteLineHello worldThis line writes the output Console is a static class in the System namespace It provides an interface to the standard input output and error streams for console applications The program calls the Console method WriteLine which displays on the console a line with the argument the string Hello worldGUIA Windows GUI exampleusing Systemusing SystemWindowsForms  Note the SystemWindowsForms namespace does will need to be installed via NuGet class Program    static void Main            MessageBoxShowHello World        ConsoleWriteLineIs almost the same argument    This example is similar to the previous example except that it generates a dialog box that contains the message Hello World instead of writing it to the consoleImagesAnother useful library is the SystemDrawing library which is used to programmatically draw images For exampleusing Systemusing SystemDrawing  Note SystemDrawing will need to be installed via NuGet public class Example    public static Image img    static void Main            img  ImageFromFileImagepng    This will create an image that is identical to that stored in ImagepngStandardization and licensingIn August 2001 Microsoft HewlettPackard and Intel cosponsored the submission of specifications for C as well as the Common Language Infrastructure CLI to the standards organization Ecma International In December 2001 ECMA released ECMA334 C Language Specification C became an ISOIEC standard in 2003 ISOIEC 232702003  Information technology  Programming languages  C ECMA had previously adopted equivalent specifications as the 2nd edition of C in December 2002 In June 2005 ECMA approved edition 3 of the C specification and updated ECMA334 Additions included partial classes anonymous methods nullable types and generics somewhat similar to C templates In July 2005 ECMA submitted to ISOIEC JTC 1SC 22 via the latters FastTrack process the standards and related TRs This process usually takes 69 monthsThe C language definition and the CLI are standardized under ISOIEC and Ecma standards that provide reasonable and nondiscriminatory licensing protection from patent claimsMicrosoft initially agreed not to sue opensource developers for violating patents in nonprofit projects for the part of the framework that is covered by the Open Specification Promise99 Microsoft has also agreed not to enforce patents relating to Novell products against Novells paying customers100 with the exception of a list of products that do not explicitly mention C NET or Novells implementation of NET The Mono Project101 However Novell maintained that Mono does not infringe any Microsoft patents102 Microsoft also made a specific agreement not to enforce patent rights related to the Moonlight browser plugin which depends on Mono provided it is obtained through Novell103A decade later Microsoft began developing free opensource and crossplatform tooling for C namely Visual Studio Code NET Core and Roslyn Mono joined Microsoft as a project of Xamarin a Microsoft subsidiaryImplementationsMicrosoft is leading the development of the opensource reference C compilers and set of tools The first compiler Roslyn compiles into intermediate language IL and the second one RyuJIT104 is a JIT justintime compiler which is dynamic and does onthefly optimization and compiles the IL into native code for the frontend of the CPU105 RyuJIT is open source and written in C106 Roslyn is entirely written in managed code C has been opened up and functionality surfaced as APIs It is thus enabling developers to create refactoring and diagnostics tools4107 Two branches of official implementation are NET Framework closedsource Windowsonly and NET Core opensource crossplatform they eventually converged into one opensource implementation NET 50108 At NET Framework 46 a new JIT compiler replaced the former104109Other C compilers some of which include an implementation of the Common Language Infrastructure and NET class librariesMono a Microsoftsponsored project provides an opensource C compiler a complete opensource implementation of the CLI including the required framework libraries as they appear in the ECMA specification and a nearly complete implementation of the NET class libraries up to NET Framework 35The Elements tool chain from RemObjects includes RemObjects C which compiles C code to NETs Common Intermediate Language Java bytecode Cocoa Android bytecode WebAssembly and native machine code for Windows macOS and LinuxThe DotGNU project now discontinued also provided an opensource C compiler a nearly complete implementation of the Common Language Infrastructure including the required framework libraries as they appear in the ECMA specification and subset of some of the remaining Microsoft proprietary NET class libraries up to NET 20 those not documented or included in the ECMA specification but included in Microsofts standard NET Framework distributionThe Unity game engine uses C as its primary scripting language The Godot game engine has implemented an optional C module thanks to a donation of 24000 from Microsoft110See alsoC topicsC syntaxComparison of C and JavaComparison of C and Visual Basic NETNET standard librariesicon	Computer programming portalIDEsVisual StudioMicrosoft Visual Studio ExpressVisual Studio CodeMonoDevelopMorfikSharpDevelopTurbo CRiderXamarin StudioLINQPadNotes for async By convention a number sign is used for the second character in normal text in artistic representations sometimes a true sharp sign is used C However the ECMA 334 standard states The name C is written as the LATIN CAPITAL LETTER C U0043 followed by the NUMBER SIGN  U0023 The Microsoft C 20 specification document only contains the new 20 features For older features use the 12 specification aboveReferences InfoQ eMag A Preview of C 7 Announcing C 12 Retrieved November 18 2023 Torgersen Mads October 27 2008 New features in C 40 Microsoft Retrieved October 28 2008 The Roslyn NET compiler provides C and Visual Basic languages with rich code analysis APIs dotnetroslyn November 13 2019  via GitHub CoreCLR is the runtime for NET Core It includes the garbage collector JIT compiler primitive data types and lowlevel classes dotnetcoreclr November 13 2019  via GitHub Naugler David May 2007 C 20 for C and Java programmer conference workshop Journal of Computing Sciences in Colleges 22 5 Although C has been strongly influenced by Java it has also been strongly influenced by C and is best viewed as a descendant of both C and Java Hamilton Naomi October 1 2008 The AZ of Programming Languages C Computerworld Archived from the original on March 24 2010 Retrieved February 12 2010 We all stand on the shoulders of giants here and every language builds on what went before it so we owe a lot to C C Java Delphi all of these other things that came before us Anders Hejlsberg Chapel spec Acknowledgments PDF Cray Inc October 1 2015 Retrieved January 14 2016 Rich Hickey QA by Michael Fogus Archived from the original on January 11 2017 Retrieved January 11 2017 Borenszweig Ary June 14 2016 Crystal 0180 released Its heavily inspired by Ruby and other languages like C Go and Python Web Languages and VMs Fast Code is Always in Fashion V8 Dart  Google IO 2013 YouTube Archived from the original on December 21 2021 Retrieved December 22 2013 Java 50 added several new language features the enhanced for loop autoboxing varargs and annotations after they were introduced in the similar and competing C language 1 2 Cornelius Barry December 1 2005 Java 5 catches up with C University of Oxford Computing Services Retrieved June 18 2014 In my opinion it is C that has caused these radical changes to the Java language Barry Cornelius Influences  The Rust Reference The Rust Reference Retrieved April 18 2023 Lattner Chris June 3 2014 Chris Lattners Homepage Chris Lattner Retrieved May 12 2020 The Swift language is the product of tireless effort from a team of language experts documentation gurus compiler optimization ninjas and an incredibly important internal dogfooding group who provided feedback to help refine and battletest ideas Of course it also greatly benefited from the experiences hardwon by many other languages in the field drawing ideas from ObjectiveC Rust Haskell Ruby Python C CLU and far too many others to list Skeet 2019 C Language Specification PDF 4th ed Ecma International June 2006 Retrieved January 26 2012 Dollard Kathleen November 14 2023 Announcing C 12 NET Blog Retrieved November 18 2023 Seth Gaurav November 14 2023 Announcing NET 8 NET Blog Retrieved November 18 2023 Albahari 2022 Design Goals of C wwwjavasamplescom Retrieved October 6 2021 Zander Jason November 22 2007 Couple of Historical Facts Retrieved February 23 2009 What language was ASPNet originally written in November 28 2006 Archived from the original on June 24 2016 Retrieved February 21 2008 Hamilton Naomi October 1 2008 The AZ of Programming Languages C Computerworld Archived from the original on May 18 2019 Retrieved October 1 2008 Details nilsnaegelecom Archived from the original on April 7 2019 Retrieved April 7 2019 Why Microsofts C isnt CNET CBS Interactive 2002 Retrieved September 18 2023 Bill Joy February 7 2002 Microsofts blind spot cnetcom Retrieved September 18 2023 Osborn John August 1 2000 Deep Inside C An Interview with Microsoft Chief Architect Anders Hejlsberg OReilly Media Retrieved November 14 2009 Generics C Programming Guide Microsoft Retrieved March 21 2011 Don Box and Anders Hejlsberg February 2007 LINQ NET LanguageIntegrated Query Microsoft Retrieved March 21 2011 Mercer Ian April 15 2010 Why functional programming and LINQ is often better than procedural code aboditcom Archived from the original on July 11 2011 Retrieved March 21 2011 Andy Retires Dan Fernandezs Blog Blogsmsdncom January 29 2004 Archived from the original on January 19 2016 Retrieved October 4 2012 Technical committees  JTC 1SC 22  Programming languages their environments and system software interfaces ISO Retrieved October 4 2012 ISOIEC 232702003  Information technology  C Language Specification Isoorg August 23 2006 Archived from the original on May 8 2012 Retrieved October 4 2012 ISOIEC 232702006  Information technology  Programming languages  C Isoorg January 26 2012 Retrieved October 4 2012 SOIEC 232702018 Information technology  Programming languages  C ISO Retrieved November 26 2020 Mariani Rico October 5 2009 My History of Visual Studio Part 1  Rico Marianis Performance Tidbits Rico Marianis Performance Tidbits Kovacs James September 7 2007 CNET History Lesson Archived from the original on March 6 2009 Retrieved June 18 2009 Hejlsberg Anders October 1 2008 The AZ of Programming Languages C Computerworld Archived from the original on April 2 2015 Retrieved June 22 2014 Microsoft C FAQ Microsoft Archived from the original on February 14 2006 Retrieved March 25 2008 F FAQ Microsoft Research Archived from the original on February 18 2009 Retrieved June 18 2009 Simon Raphael Stapf Emmanuel Meyer Bertrand June 2002 Full Eiffel on the NET Framework Microsoft Retrieved June 18 2009 Whats new in the C 20 Language and Compiler Microsoft Archived from the original on December 18 2010 Retrieved June 11 2014 Hejlsberg Anders Torgersen Mads April 30 2007 Overview of C 30 Microsoft Developer Network Microsoft Retrieved June 11 2014 Using C 30 from NET 20 Danielmothcom May 13 2007 Retrieved October 4 2012 Hejlsberg Anders Future directions for C and Visual Basic C lead architect Microsoft Archived from the original on September 23 2011 Retrieved September 21 2011 An Introduction to New Features in C 50 MSDN Blogs Microsoft Archived from the original on June 4 2014 Retrieved June 11 2014 Language feature implementation status github Microsoft Archived from the original on January 12 2016 Retrieved February 13 2015 Whats new in C 7 Microsoft Docs December 21 2016 New Features in C 70 NET Blog March 9 2017 Retrieved June 9 2017 Visual Studio 2017 version 150 Release Notes docsmicrosoftcom April 11 2023 Retrieved April 19 2023 Whats new in C 71 Microsoft Docs Retrieved October 9 2017 Visual Studio 2017 version 153 Release Notes docsmicrosoftcom April 11 2023 Retrieved April 19 2023 Whats new in C 72 Microsoft Docs Retrieved November 26 2017 Visual Studio 2017 version 155 Release Notes docsmicrosoftcom April 11 2023 Retrieved April 19 2023 Whats new in C 73 Microsoft Docs Retrieved June 23 2018 Visual Studio 2017 version 157 Release Notes docsmicrosoftcom July 13 2022 Retrieved April 19 2023 Whats new in C 80 Microsoft Docs March 9 2023 Visual Studio 2019 version 163 Release Notes docsmicrosoftcom April 11 2023 Retrieved April 19 2023 BillWagner Whats new in C 90  C Guide docsmicrosoftcom Retrieved October 15 2020 Visual Studio 2019 version 168 Release Notes docsmicrosoftcom April 11 2023 Retrieved April 19 2023 Whats new in C 10 docsmicrosoftcom Retrieved November 10 2021 Visual Studio 2022 version 170 Release Notes docsmicrosoftcom Retrieved April 19 2023 Whats new in C 11 docsmicrosoftcom Retrieved August 8 2022 Visual Studio 2022 version 174 Release Notes docsmicrosoftcom Retrieved April 19 2023 Whats new in C 12 docsmicrosoftcom Retrieved June 29 2023 Visual Studio 2022 version 176 Release Notes docsmicrosoftcom Retrieved June 29 2023 Novk et al 2010 stevewhims mattwojo October 20 2022 Compiling Apps with NET Native  UWP applications learnmicrosoftcom Retrieved October 27 2023 LakshanF agocke RickAnderson et al September 12 2023 Native AOT deployment overview  NET learnmicrosoftcom Retrieved October 27 2023 BillWagner Expression Trees C docsmicrosoftcom Retrieved May 14 2021 dotnetbot SystemReflectionEmit Namespace learnmicrosoftcom Retrieved April 28 2023 McAllister Neil October 20 2011 Microsofts Roslyn Reinventing the compiler as we know it InfoWorld Retrieved March 5 2022 Introducing C Source Generators NET Blog April 29 2020 Retrieved May 14 2021 virtual C Reference docsmicrosoftcom September 15 2021 AutoImplemented Properties C Programming Guide Retrieved September 12 2020 using directive  C Reference Microsoft Docs Retrieved April 14 2019 BillWagner Unsafe code pointers to data and function pointers docsmicrosoftcom Retrieved June 20 2021 How to create userdefined exceptions Retrieved September 12 2020 Venners Bill Eckel Bruce August 18 2003 The Trouble with Checked Exceptions Retrieved March 30 2010 BillWagner Operator overloading  C reference docsmicrosoftcom Retrieved June 20 2021 Zhang Xue Dong Teng Zi Mu Zhao Dong Wang September 2014 Research of the Database Access Technology UnderNET Framework Applied Mechanics and Materials 644650 30773080 doi104028wwwscientificnetAMM6446503077 S2CID 62201466 ProQuest 1565579768 Otey Michael February 2006 LINQ to the Future SQL Server Magazine Vol 8 no 2 pp 1721 ProQuest 214859896 Sheldon William November 2010 New Features in LINQ SQL Server Magazine Vol 12 no 11 pp 3740 ProQuest 770609095 BillWagner September 15 2021 Query Syntax and Method Syntax in LINQ C learnmicrosoftcom Retrieved May 23 2023 erikdietrich March 9 2023 The history of C  C Guide learnmicrosoftcom Retrieved April 28 2023 The functional journey of C  Mads Torgersen  NDC Copenhagen 2022 retrieved May 15 2023 The Beauty of Closures csharpindepthcom Retrieved April 28 2023 BillWagner Anonymous functions  C Programming Guide docsmicrosoftcom Retrieved May 15 2021 Whats New in C 70 Microsoft Docs Retrieved April 14 2019 C 90 on the record NET Blog November 10 2020 Retrieved May 15 2021 BillWagner June 30 2022 init keyword  C Reference learnmicrosoftcom Retrieved May 19 2023 The NET Compiler Platform NET Platform April 28 2023 retrieved April 28 2023 Archer 2001 Lippert Eric March 19 2009 Representation and Identity Fabulous Adventures In Coding Blogsmsdncom Retrieved October 4 2012 Framework Libraries docsmicrosoftcom April 19 2023 BillWagner Whats new in C 90  C Guide docsmicrosoftcom Retrieved May 14 2021 BillWagner Main and commandline arguments docsmicrosoftcom Retrieved August 5 2021 Patent Pledge for Open Source Developers March 16 2023 Patent Cooperation Agreement  Microsoft  Novell Interoperability Collaboration Microsoft November 2 2006 Archived from the original on May 17 2009 Retrieved July 5 2009 Microsoft on behalf of itself and its Subsidiaries collectively Microsoft hereby covenants not to sue Novells Customers and Novells Subsidiaries Customers for infringement under Covered Patents of Microsoft on account of such a Customers use of specific copies of a Covered Product as distributed by Novell or its Subsidiaries collectively Novell for which Novell has received Revenue directly or indirectly for such specific copies provided the foregoing covenant is limited to use by such Customer i of such specific copies that are authorized by Novell in consideration for such Revenue and ii within the scope authorized by Novell in consideration for such Revenue Definitions Microsoft November 2 2006 Retrieved July 5 2009 Steinman Justin November 7 2006 Novell Answers Questions from the Community Retrieved July 5 2009 We maintain that Mono does not infringe any Microsoft patents Covenant to Downstream Recipients of Moonlight  Microsoft  Novell Interoperability Collaboration Microsoft September 28 2007 Archived from the original on September 23 2010 Retrieved March 8 2008 Downstream Recipient means an entity or individual that uses for its intended purpose a Moonlight Implementation obtained directly from Novell or through an Intermediate Recipient Microsoft reserves the right to update including discontinue the foregoing covenant Moonlight Implementation means only those specific portions of Moonlight 10 or Moonlight 11 that run only as a plugin to a browser on a Personal Computer and are not licensed under GPLv3 or a Similar License The RyuJIT transition is complete microsoftcom June 19 2018 Archived from the original on July 19 2019 Retrieved July 20 2021 Managed Execution Process microsoftcom Archived from the original on December 23 2017 Retrieved July 20 2021 coreclrsrcjit githubcom Archived from the original on January 9 2019 Retrieved July 20 2021 C Guide docsmicrosoftcom 508 microsoftcom Archived from the original on April 23 2020 Retrieved July 20 2021 Mitigation New 64bit JIT Compiler microsoftcom Archived from the original on April 5 2018 Retrieved July 20 2021 Etcheverry Ignacio October 21 2017 Introducing C in Godot Godot Engine Archived from the original on October 26 2018 Retrieved October 26 2018Further readingAlbahari Joseph 2022 C 10 in a Nutshell First ed OReilly ISBN 9781098121952Archer Tom 2001 Part 2 Chapter 4 The Type System Inside C Redmond Washington Microsoft Press ISBN 0735612889Drayton Peter Albahari Ben Neward Ted 2002 C Language Pocket Reference OReilly ISBN 059600429XNovk Istvn Velvart Andras Granicz Adam Balssy Gyrgy Hajdrik Attila Sellers Mitchel Hillar Gastn C Molnr gnes Kanjilal Joydip 2010 Visual Studio 2010 and NET 4 SixinOne Wrox Press ISBN 9780470499481Petzold Charles 2002 Programming Microsoft Windows with C Microsoft Press ISBN 0735613702Skeet Jon 2019 C in Depth Fourth ed Manning ISBN 9781617294532External linksC Language SpecificationC Programming GuideISO C Language SpecificationC Compiler Platform Roslyn source codevteCommon Language InfrastructurevteMicrosoft free and opensource software FOSSvteStandards of Ecma InternationalvteISO standards by standard numbervteProgramming languagesComparisonTimelineHistoryAdaALGOLAPLAssemblyBASICCCCClassic Visual BasicCOBOLErlangForthFortranGoHaskellJavaJavaScriptJuliaKotlinLispLuaMATLABMLObject PascalPascalPerlPHPPrologPythonRRubyRustSQLScratchShellSimulaSmalltalkSwiftVisual Basicmore Lists AlphabeticalCategoricalGenerationalNonEnglishbased CategoryvteIEC standardsAuthority control databases National Edit this at Wikidata	FranceBnF dataGermanyIsraelUnited StatesCzech RepublicCategories C Sharp programming language family2000 softwareAmerican inventionsProgramming languagesNET programming languagesClassbased programming languagesEcma standardsFunctional languagesIEC standardsISO standardsMicrosoft programming languagesMultiparadigm programming languagesProgramming languages created in 2000Programming languages with an ISO standardStatically typed programming languagesCompiled programming languagesThis page was last edited on 18 November 2023 at 2039 UTCText is available under the Creative Commons AttributionShareAlike License 40 additional terms may apply By using this site you agree to the Terms of Use and Privacy Policy Wikipedia is a registered trademark of the Wikimedia Foundation Inc a nonprofit organizationPrivacy policyAbout WikipediaDisclaimersContact WikipediaCode of ConductDevelopersStatisticsCookie statementMobile viewWikimedia FoundationPowered by MediaWikiToggle limited content width";

        Console.WriteLine(input);
        Console.WriteLine("\n\n");
        if (string.IsNullOrEmpty(input))
        {
            Console.WriteLine("The input is empty...");
            return;
        }

        var sw = new Stopwatch();

        sw.Start();
        var sb = new StringBuilder();
        for (var i = 0; i < input.Length; i++)
            if (!sb.ToString().Contains(input[i]))
                sb.Append(input[i]);
        sw.Stop();
        Console.WriteLine($"Stringbuilder took \t{sw.Elapsed}");

        sw.Reset();
        var output = string.Empty;

        sw.Start();
        for (var i = 0; i < input.Length; i++)
            if (!output.Contains(input[i]))
                output += input[i];
        sw.Stop();
        Console.WriteLine($"String operations took \t{sw.Elapsed}");

        sw.Reset();
        sw.Start();
        var answer = new string(input.Distinct().ToArray());
        sw.Stop();
        Console.WriteLine($"String.Distinct() took \t{sw.Elapsed}");

        sw.Reset();
        var seenChars = new HashSet<char>();

        sw.Start();
        foreach (var c in input) seenChars.Append(c);
        var keys = string.Join(string.Empty, seenChars);
        sw.Stop();
        Console.WriteLine($"HashSet took: \t\t{sw}");

        sw.Reset();
        Console.WriteLine("\n\n");
        Console.WriteLine($"Text without duplicate characters: {sb}");
        Separator();
    }
}